package com.wipro.ecommerce.onlineshopping.service;

import com.wipro.ecommerce.onlineshopping.entity.Cart;
import com.wipro.ecommerce.onlineshopping.entity.Product;
import com.wipro.ecommerce.onlineshopping.entity.User;
import com.wipro.ecommerce.onlineshopping.repository.CartRepository;
import com.wipro.ecommerce.onlineshopping.repository.ProductRepository;
import com.wipro.ecommerce.onlineshopping.repository.UserRepository;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class CartService {

    private final CartRepository cartRepo;
    private final UserRepository userRepo;
    private final ProductRepository productRepo;

    public CartService(CartRepository cartRepo, UserRepository userRepo, ProductRepository productRepo) {
        this.cartRepo = cartRepo;
        this.userRepo = userRepo;
        this.productRepo = productRepo;
    }

    public Cart addItem(Long userId, Long productId, Integer quantity) {
        Cart existing = cartRepo.findByUserIdAndProductId(userId, productId);
        if (existing != null) {
            existing.setQuantity(existing.getQuantity() + quantity);
            return cartRepo.save(existing);
        }

        // Else create new cart item
        User user = userRepo.findById(userId).orElseThrow();
        Product product = productRepo.findById(productId).orElseThrow();
        Cart cart = new Cart(user, product, quantity);
        return cartRepo.save(cart);
    }

    public List<Cart> getUserCart(Long userId) {
        User user = userRepo.findById(userId)
                .orElseThrow(() -> new RuntimeException("User not found"));
        return cartRepo.findByUser(user);
    }

    public void removeItem(Long id) {
        if (!cartRepo.existsById(id)) {
            throw new RuntimeException("Cart item not found");
        }
        cartRepo.deleteById(id);
    }
    
    public Cart updateQuantity(Long cartId, Integer quantity) {
        Cart cartItem = cartRepository.findById(cartId)
                .orElseThrow(() -> new RuntimeException("Cart item not found"));
        cartItem.setQuantity(quantity);
        return cartRepository.save(cartItem);
    }

}
